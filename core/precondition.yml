include:
  - local: 'core/precondition-semver.yml'

.set:version:
  extends: .rp_base
  stage: precondition
  before_script:
    - |
      #### Pulling Artifacts ####
      set -e
      
      [[ -z "${RELEASE_PASS}" ]] && { echo "!! RELEASE_PASS not set. Create an access token with repository write/read and set RELEASE_PASS in CI/CD variables of the project then retry !!" && exit 1; } || { echo "RELEASE_PASS set. Continuing"; }
      if [[ -z "${RP_PARENT_PIPELINE_ID}" || $RP_PARENT_PIPELINE_ID == "pull" ]]; then
        SETUP_ARTIFACT_REF=${RP_SETUP_ARTIFACT_REF:-main}
        SETUP_ARTIFACT_JOB=${RP_SETUP_ARTIFACT_JOB:-"publish:scripts"}
        
        CURL_CMD='curl -sS -o ${OUTPUT_FOLDER}${ARTIFACT} --location --header "PRIVATE-TOKEN: ${RP_TEMPLATE_PROJECT_API_TOKEN}" "${CI_API_V4_URL}/projects/${RP_TEMPLATE_PROJECT_ID}/jobs/artifacts/${SETUP_ARTIFACT_REF}/raw/${OUTPUT_FOLDER}${ARTIFACT}?job=${SETUP_ARTIFACT_JOB}"'
        
        echo "Pulling artifacts from projectid:${RP_TEMPLATE_PROJECT_ID} ref:${SETUP_ARTIFACT_REF} job:${SETUP_ARTIFACT_JOB}"
        
        mkdir .config || true
        OUTPUT_FOLDER=.config/
        ARTIFACT=.pypirc eval "${CURL_CMD}"
        ARTIFACT=pip.conf eval "${CURL_CMD}"
        ARTIFACT=.netrc eval "${CURL_CMD}"
        ARTIFACT=codequality-cache.sh eval "${CURL_CMD}"
        
        OUTPUT_FOLDER=
        ARTIFACT=semver.py eval "${CURL_CMD}"
        ARTIFACT=release.sh eval "${CURL_CMD}"
      fi
    - |
      #### Processing Artifacts ####
      set -e
      
      if [[ -z "${RP_CENTRAL_REGISTRY_PROJECT_ID}" ]]; then
        RP_CENTRAL_REGISTRY_PROJECT_ID=${CI_PROJECT_ID}
      fi
      find .config -type f | xargs sed -i "s/\$CI_JOB_TOKEN/$CI_JOB_TOKEN/g"
      find .config -type f | xargs sed -i "s/\$CI_PROJECT_ID/$CI_PROJECT_ID/g"
      find .config -type f | xargs sed -i "s/\$RP_CENTRAL_REGISTRY_PROJECT_ID/$RP_CENTRAL_REGISTRY_PROJECT_ID/g"
      find .config -type f | xargs sed -i "s/\$CI_SERVER_HOST/$CI_SERVER_HOST/g"

      CI_API_V4_URL_REPLACE=$(printf '%s\n' "$CI_API_V4_URL" | sed -e 's/[\/&]/\\&/g')
      find .config -type f | xargs sed -i "s/\$CI_API_V4_URL/$CI_API_V4_URL_REPLACE/g"

      mv .config/codequality-cache.sh .
      chmod +x codequality-cache.sh
      chmod +x semver.py
      chmod +x release.sh
    - |
      #### Generating config.sh ####
      set -e
      
      echo "cp .config/.netrc ~" > config.sh
      echo "cp .config/.pypirc ~" >> config.sh
      echo "mkdir ~/.pip || true" >> config.sh
      echo "cp .config/pip.conf ~/.pip" >> config.sh
      echo 'echo "FULL_DIR: $(realpath ${DIR})"' >> config.sh
      echo "chmod 600 ~/.pypirc" >> config.sh
      chmod +x config.sh
  script:
    - |
      #### Checking SemVer ####
      set -e
      
      ./config.sh
      cd $DIR
      ${CI_PROJECT_DIR}/release.sh prep
  artifacts:
    reports:
      dotenv: $DIR/release.env

set:version:
  stage: precondition
  extends:
   - .set:version
  rules:
    - if: $RP_INCLUDE_PRECONDITIONS == 'true'
    - !reference [.release_rules, rules]

gate:preconditions:
  stage: prebuild
  extends:
    - .rp_base
  before_script: !reference [.set:version, before_script]
  script: |
    #### Checking ENVARs ####
    set -e
    
    fail_job=0
    
    echo "‚≠ê  Checking for required environment variables  ‚≠ê "
    required_envars=( TAG DESCRIPTION APP VERSION BUILD RELEASE_SEMVER PRERELEASE_SEMVER DEBUG_SEMVER )
    for var in "${required_envars[@]}"
    do
      value=$(eval echo \${"$var"})
      if [[ -z $value ]]; then
        echo "   ‚õî  ${var}"
        fail_job=1
      else
        echo "   ‚úÖ  ${var}=${value}"
      fi
    done
    
    echo "üí´  Checking for recommended environment variables  üí´ "
    recommended_envars=( VERSION_PATCH VERSION_MINOR VERSION_MAJOR VERSION_CODE CURRENT_VERSION )
    for var in "${recommended_envars[@]}"
    do
      value=$(eval echo \${"$var"})
      if [[ -z $value ]]; then
        echo "   ‚ö†Ô∏è  ${var}"
      else
        echo "   ‚úÖ  ${var}=${value}"
      fi
    done
    
    if [[ $fail_job != 0 ]]; then
      echo "‚õî One or more ‚≠ê required‚≠ê  ENVARs are unset, failing job ‚õî "
    else
      echo "‚úÖ Everything looks go to üöÄ "
    fi
    exit $fail_job
  artifacts:
    paths:
      - .config/*
      - semver.py
      - release.sh
      - codequality-cache.sh
      - config.sh
  rules:
    - if: $RP_INCLUDE_PRECONDITIONS == 'true'
    - !reference [.release_rules, rules]
