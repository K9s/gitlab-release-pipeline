include:
  - local: core/.gate_base.yml

gate:release:
  extends:
   - .rp_base
  stage: release
  script:
    - |
      #### SemVer Validation ####
      set -e
      
      cd ${DIR}
      [[ -z "${VERSION_BUMPED}" ]] && { echo "!!! Version not bumped, continuing with release !!!"; } || { echo "Version bumped to ${VERSION_BUMPED}, not doing release" && exit 1; }
      echo "Expected to release ${RELEASE_SEMVER}...checking for issues..."
      export RP_SEMVER_BUILD_REF=BUILD
      ${CI_PROJECT_DIR}/release.sh release
    - |
      #### Bump Version Code ####
      set -e
      
      if [[ -n $VERSION_CODE ]]; then
        export __APP=`echo ${APP} | tr '-' '_'`
        _APP=$(python -c "import os;print(os.environ.get('__APP').upper())")
        
        VERSION_CODE_CURRENT=$((${_APP}_VERSION_CODE))
        if [[ ${VERSION_CODE_CURRENT} -eq 0 ]]; then
          RESULT=$(curl -sS --request POST --header "PRIVATE-TOKEN: ${RELEASE_PASS}" \
            "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables" --form "key=${_APP}_VERSION_CODE" --form "value=${VERSION_CODE}")
        else
          if ! [[ ${VERSION_CODE} -eq ${VERSION_CODE_CURRENT}+1 ]]; then
            echo "Woops, looks like VERSION_CODE: ${VERSION_CODE} for ${APP} was release already!  Please re-run pipeline."
            exit 1
          fi
          RESULT=$(curl -sS --request PUT --header "PRIVATE-TOKEN: ${RELEASE_PASS}" \
            "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/${_APP}_VERSION_CODE" --form "value=${VERSION_CODE}")
        fi
        
        echo "Bumping ${_APP}_VERSION_CODE from ${VERSION_CODE_CURRENT} to ${VERSION_CODE}"
      else
        echo "VERSION_CODE not set, not doing VERSION_CODE bump"
      fi
    - |
      #### Lets GO! ####
      echo "ðŸš€ Release is a GO ðŸš€ "

  when: manual
  allow_failure: false
  interruptible: true
  resource_group: $APP-gate-release
  rules:
    - !reference [.release_rules, continuous_deployment]
  dependencies: !reference [.gate_base, dependencies]

.gitlab:release:needs:
  needs:
    - job: 'set:version'
    - job: 'gate:preconditions'
    - job: 'gate:release'
    - job: 'build:candidate'
      optional: true
    - job: 'test:candidate'
      optional: true
    - job: 'publish:candidate'
      optional: true

.gitlab:release:
  needs:
    - !reference [.gitlab:release:needs, needs]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Releasing ${APP} version ${VERSION}"
  release:
    name: $RP_GITLAB_RELEASE_PREFIX $TAG
    description: $DESCRIPTION
    tag_name: $TAG
    ref: $CI_COMMIT_SHA

gitlab:release:
  stage: release
  extends:
    - .gitlab:release
  rules:
    - !reference [.release_rules, rules]
